#include "adc.h"
#include "delay.h"
#include "gpio.h"
#include "interrupt.h"
#include "log.h"
#include "soft_timer.h"

#include <stdbool.h>
#include <stdlib.h>

typedef struct CounterStorage {
  uint16_t potentiometer_data;  // Stores data
  AdcChannel channel;           // Stores channel
} CounterStorage;

void prv_button_interrupt_handler(const GpioAddress *address, void *context) { 
  CounterStorage *storage = context;
  adc_read_converted(storage->channel, storage->potentiometer_data);
  LOG_DEBUG("potentiometer data: %d\n", storage->potentiometer_data);
}

int main() {
  interrupt_init();  // Initializing Interrupts
  gpio_init();       // Initializing GPIO
  gpio_it_init() :
     

  GpioAddress button = { .port = GPIO_PORT_B, .pin = 2 };
  GpioAddresss potentiometer_addr = { .port = GPIO_PORT_A, .pin = 6 };

  GpioSettings pot_settings{
    // GPIO Settings
    GPIO_DIR_IN,
    GPIO_STATE_LOW,
    GPIO_RES_NONE,
    GPIO_ALTFN_ANALOG,
  };

  GpioSettings button_settings{ 
    // GPIO Button Settings
    .direction = GPIO_DIR_IN,
    .alt_function = GPIO_ALTFN_NONE,
    .resistor = GPIO_RES_PULLDOWN
  };

  InterruptSettings s_interrupt_settings = {
    // Required Interrupt Settings
    .type = INTERRUPT_TYPE_INTERRUPT,
    .priority = INTERRUPT_PRIORITY_NORMAL,
  };

  AdcChannel pot_channel = NUM_ADC_CHANNELS;

  gpio_init_pin(&potentiometer_addr, &pot_settings);
  gpio_init_pin(&button, &button_settings);
  adc_init(ADC_MODE_SINGLE);

  adc_get_channel(potentiometer_addr, &pot_channel);  // Gets the Address
  adc_set_channel(pot_channel, true);                 // Enables the Channel

  // Creates the structure
  CounterStorage store_in_here = { 
    .potentiometer_data = 0, 
    .address = pot_channel 
  };

  // Registers an Interrupt
  gpio_it_register_interrupt(&potentiometer_addr, &s_interrupt_settings, INTERRUPT_EDGE_FALLING,
                             prv_button_interrupt_handler, &store_in_here);

  while (true) {
  }

  return 0;
}
